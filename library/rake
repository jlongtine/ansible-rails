#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2013-2014, Raphael Randschau <nicolai86@me.com>

DOCUMENTATION = '''
---
module: rake
short_description: Run rake commands
version_added: "1.0"
author: Raphael Randschau
options:
  path:
    description:
      - path which should cd'd into to run commands
    required: yes
  command:
    description:
      - an arbitrary rake command to be executed
    required: yes
    default: no
  executable:
    description:
      - Bundler executable
    required: no
    default: $GEM_HOME/bin/bundle
  rails_env:
    description:
      - RAILS_ENV used by commands
    required: no
  bundled:
    description:
      - use `bundle exec rake` or `bundle exec rails` instead of `rake` and `rails`
    required: no
    default: no
  force:
    description:
      - force command in question
    required: no
    default: no
'''

EXAMPLES = '''
# migrate the database
rails: path=/path rails_env=staging migrate=yes bundled=yes

# compile the assets
rails: path=/path rails_env=staging assets=yes bundled=yes
'''

import re
import os
import sys
import subprocess
from subprocess import check_output

class BaseModule(object):
    module = None
    def __init__(self, module):
        self.module = module

    def load_env(self):
        """load the environment from a users bashrc. Usefull to pick up custom $PATH"""
        home_path = os.getenv('HOME')
        if not os.path.exists(home_path + '/.bashrc'):
            return {}

        env_command = ['/bin/bash', '-c', 'source ' + home_path + '/.bashrc && env']

        proc = subprocess.Popen(env_command, stdout = subprocess.PIPE)
        env = {}
        for line in proc.stdout:
          (key, _, value) = line.decode("utf-8").strip().partition("=")
          env[key] = value

        proc.communicate()

        return dict(env)

    def get_bundle_path(self):
        """locate the bundle binary"""
        extra_paths = []

        gem_home = self.load_env().get('GEM_HOME', None)
        if gem_home:
            extra_paths.append(gem_home + '/bin')

        return self.module.get_bin_path('bundle', True, extra_paths)

    def diff(self, path_a, path_b):
        """returns False if both paths are the same, otherwise True"""
        try:
          check_output(['diff', '-r', '-q', path_a, path_b])
          return False
        except subprocess.CalledProcessError, error:
          return os.path.exists(path_a) or os.path.exists(path_b)

class RakeModule(BaseModule):
    def get_rake_path(self):
        """locate the rake binary"""
        extra_paths = []

        gem_home = self.load_env().get('GEM_HOME', None)
        if gem_home:
            extra_paths.append(gem_home + '/bin')

        return self.module.get_bin_path('rake', True, extra_paths)

    def run_command(self, command):
        """run artibrary rake command"""
        if self.module.check_mode:
            return False

        os.chdir(self.module.params['path'])

        force = self.module.params.get('force', False)
        if not force:
           has_diffs = False
           diff_paths = self.module.params.get('diff_paths', [])
           if diff_paths != None and len(diff_paths) > 0:
             for path in diff_paths:
                 has_diffs = has_diffs or self.diff(path['current'], path['next'])

           if not has_diffs:
               return False

        cmd = ''
        if self.module.params.get('rails_env', None):
            os.environ['RAILS_ENV'] = self.module.params.get('rails_env')

        if self.module.params.get('bundled', None):
            cmd = self.get_bundle_path() + ' exec rake'
        else:
            cmd = self.get_rake_path()

        cmd = "{0} {1}".format(cmd, command)

        self.module.run_command(cmd, check_rc=True)
        return True

def main():
    module = AnsibleModule(
        argument_spec = dict(
            command        = dict(required=True, type='str'),
            path           = dict(required=True, type='str'),
            rails_env      = dict(required=False, type='str'),
            bundled        = dict(required=False, type='bool'),
            force          = dict(required=False, type='bool'),
            diff_paths     = dict(required=False, type='list')
        ),
        supports_check_mode = True,
        mutually_exclusive = [ ],
    )

    rake_module = RakeModule(module)

    changed = False
    if module.params.get('command', None):
        command = module.params['command']
        changed = changed or rake_module.run_command(command)

    result = {}
    result['changed'] = changed

    module.exit_json(**result)

# include magic from lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
if __name__ == '__main__':
    main()