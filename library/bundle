#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2013, Raphael Randschau <nicolai86@me.com>

DOCUMENTATION = '''
---
module: bundler
short_description: Install Application Dependencies
version_added: "1.0"
options:
  executable:
    description:
      - Bundler executable
    required: no
    default: $GEM_HOME/bin/bundle
  deployment:
    description:
      - Run for deployment
    required: false
    default: yes
  binstubs:
    description:
      - generate binstubs
    required: false
    default: no
  gemfile:
    description:
      - Path of Gemfile to run against
    required: false
    default: yes
  path:
    description:
      - Path to install dependencies into
    required: false
author: Raphael Randschau
'''

EXAMPLES = '''
# Installs application dependencies
- bundle: path=shared/vendor deployment=yes
'''

import re
import os
import sys
import subprocess

from ansible.module_utils.basic import *

class BundlerModule(object):
    module = None
    def __init__(self, module):
        self.module = module

    def load_env(self):
        home_path = os.getenv('HOME')
        env_command = ['/bin/bash', '-c', 'source ' + home_path + '/.bashrc && env']

        proc = subprocess.Popen(env_command, stdout = subprocess.PIPE)
        env = {}
        for line in proc.stdout:
          (key, _, value) = line.decode("utf-8").strip().partition("=")
          env[key] = value

        proc.communicate()

        return dict(env)

    def get_bundle_path(self):
        if self.module.params['executable']:
            return self.module.params['executable']
        else:
            extra_paths = []

            gem_home = self.load_env()['GEM_HOME']
            if gem_home:
                extra_paths.append(gem_home + '/bin')

            return self.module.get_bin_path('bundle', True, extra_paths)

    def gems_were_changed(self, stdout):
        installed = True
        try:
            stdout.index("Installing")
        except ValueError:
            installed = False

        updated = True
        try:
            stdout.index("Updating")
        except ValueError:
            updated = False

        upgrade = True
        try:
            stdout.index("upgrade")
        except ValueError:
            upgrade = False

        return updated or installed or upgrade

    def run_bundle(self):
        if self.module.check_mode:
            return False

        cmd = [ self.get_bundle_path() ]

        cmd.append('install')
        cmd.append('--without=deployment:test')
        if self.module.params.get('path'):
            cmd.append('--path=' + self.module.params.get('path'))
        if self.module.params.get('gemfile'):
            cmd.append('--gemfile=' + self.module.params.get('gemfile'))
        if self.module.params.get('binstubs'):
            cmd.append('--binstubs=bin/')
        if self.module.params.get('deployment'):
            cmd.append('--deployment')

        (rc, stdout, stderr) = self.module.run_command(cmd, check_rc=True)

        return self.gems_were_changed(stdout)

def main():
    module = AnsibleModule(
        argument_spec = dict(
            path           = dict(required=True, type='str'),
            executable     = dict(required=False, type='str'),
            gemfile        = dict(required=True, type='str'),
            deployment     = dict(required=False, type='bool'),
            binstubs       = dict(required=False, type='bool'),
        ),
        supports_check_mode = True,
        mutually_exclusive = [ ],
    )

    bundler = BundlerModule(module)
    changed = bundler.run_bundle()

    result = {}
    result['path'] = module.params['path']
    result['executable'] = module.params['executable']
    result['changed'] = changed

    module.exit_json(**result)

# include magic from lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
if __name__ == '__main__':
    main()